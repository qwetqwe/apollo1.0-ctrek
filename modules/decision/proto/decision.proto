syntax = "proto2";

package apollo.decision;

import "modules/common/proto/header.proto";
import "modules/common/proto/geometry.proto";
import "modules/prediction/proto/prediction_obstacle.proto";
import "modules/canbus/proto/chassis.proto";

message Range {
    optional double start = 1;
    optional double end = 2;
}

message TargetLane {
    // lane id
    optional string id = 1;
    optional double start_s = 2;  // in meters
    optional double end_s = 3;    // in meters
    optional double speed_limit = 4; // in m/s
}

message ObjectIgnore {
}

enum StopReasonCode {
    STOP_REASON_HEAD_VEHICLE = 1;
    STOP_REASON_DESTINATION = 2;
    STOP_REASON_PEDESTRIAN = 3;
    STOP_REASON_OBSTACLE = 4;
    STOP_REASON_PREPARKING = 5;
    STOP_REASON_SIGNAL = 100;
    STOP_REASON_STOP_SIGN = 101;
    STOP_REASON_YIELD_SIGN = 102;
    STOP_REASON_CLEAR_ZONE = 103;
    STOP_REASON_CROSSWALK = 104;
}

message ObjectStop {
    // stop at least distance_s before the object
    optional double distance_s = 1;  // in meters
    optional Range preferred_distance_s = 2; // NOT SUPPORTED FIELD
    optional StopReasonCode reason_code = 3;
    optional apollo.common.PointENU stop_point = 4; // stop point
}

message ObjectNudge {
    // minimum lateral distance with the object
    optional double distance_l = 1;  // in meters
    enum Type {
        LEFT_NUDGE = 1;
        RIGHT_NUDGE = 2;
    };
    optional Type type = 2;
    optional Range preferred_distance_l = 3; // NOT SUPPORTED FIELD
}

message ObjectYield {
    // minimum longitutional distance with the object
    optional double distance_s = 1;  // in meters
    optional Range preferred_distance_s = 2; // NOT SUPPORTED FIELD
    optional apollo.common.PointENU yield_point = 3;
}

message ObjectFollow {
    // minimum longitutional distance with the object
    optional double distance_s = 1;  // in meters
    optional Range preferred_distance_s = 2; // NOT SUPPORTED FIELD
    optional apollo.common.PointENU follow_point = 3;
}

message ObjectOvertake {
    // minimum longitutional distance with the object
    optional double distance_s = 1;  // in meters
    optional Range preferred_distance_s = 2;  // NOT SUPPORTED FIELD
    optional apollo.common.PointENU overtake_point = 3;
}

message ObjectSidePass {
    // follow or lead the object from side lane keeping a longitutional distance to it.
    // if you want to cut in the neighbored lane, you may need to sidepass a neighbored object
    // first.
    optional double distance_s = 1;  // in meters
    optional Range preferred_distance_s = 2; // in meters, relative to the object
    enum Type {
        FOLLOW = 1;  //follow the object from side lane
        LEAD = 2;  //lead the object from side lane
    };
    optional Type type = 3;
}

message ObjectAvoid {
}

message ObjectDecisionType {
    oneof object_tag {
        ObjectIgnore ignore = 1;
        ObjectStop stop = 2;
        ObjectFollow follow = 3;
        ObjectYield yield = 4;
        ObjectOvertake overtake = 5;
        ObjectNudge nudge = 6;
        ObjectSidePass sidepass = 7;
        ObjectAvoid avoid = 8;  // unified object decision while estop
    }
}

message ObjectDecision {
    enum ObjectType {
        PREDICTION = 1;
        PERCEPTION = 2;
        VIRTUAL = 3;
    }
    optional apollo.prediction.PredictionObstacle prediction = 1;
    optional string id = 2;
    optional ObjectType type = 3;
    optional ObjectDecisionType decision = 4 [deprecated = true];
    repeated ObjectDecisionType object_decision = 5;
}

message ObjectDecisions {
    repeated ObjectDecision decision = 1;
}

// stop at distance_s on lane
message StopLine {
    optional string lane_id = 1;
    optional double distance_s = 2;
}

message MainStop {
    // stop at or before distance_s relative to the lane_id
    optional StopLine enforced_line = 1;
    optional StopLine preferred_start = 2; // NOT SUPPORTED FIELD
    optional StopLine preferred_end = 3; // NOT SUPPORTED FIELD
    optional string reason = 4;
    optional StopReasonCode reason_code = 5;
    //when stopped, the front center of vehicle should be at this point
    optional apollo.common.PointENU stop_point = 6;
    //when stopped, the heading of the vehicle should be stop_heading
    optional double stop_heading = 7;
}

message EmergencyStopHardBrake {
}

message EmergencyStopCruiseToStop {
}

message MainEmergencyStop {
    // unexpected event happened, human driver is required to take over the vehicle.
    optional string reason = 1;
    enum ReasonCode {
        ESTOP_REASON_INTERNAL_ERR = 1;
        ESTOP_REASON_COLLISION = 2;
        ESTOP_REASON_ST_FIND_PATH = 3;
        ESTOP_REASON_ST_MAKE_DECISION = 4;
        ESTOP_REASON_SENSOR_ERROR = 5;
    }
    optional ReasonCode reason_code = 2;
    oneof task {
        EmergencyStopHardBrake hard_brake = 3;  // hard brake
        EmergencyStopCruiseToStop cruise_to_stop = 4;  // cruise to stop
    }
}

message MainCruise {
    // cruise current lane
}

message MainChangeLane {
    enum Type {
        LEFT = 1;
        RIGHT = 2;
    };
    optional Type type = 1;
    repeated TargetLane default_lane = 2;
    optional MainStop default_lane_stop = 3;
    optional MainStop target_lane_stop = 4;
}

message MainMissionComplete {
    // arrived at routing destination
}

message MainNotReady {
    // decision system is not ready.
    // e.g. wait for routing data.
    optional string reason = 1;
}

message MainParking {
    enum Type {
        FORWARD_PARKING = 1;
        REVERSE_PARKING = 2;
    };
    optional Type type = 1;
    // the heading of the final car position
    optional double heading = 2;
    // stop point
    optional apollo.common.PointENU stop_point = 3;
    // the polygon of the parking spot
    repeated apollo.common.PointENU parking_polygon = 4;
}

message MainDecision {
    oneof task {
        MainCruise cruise = 1;
        MainStop stop = 2;
        MainEmergencyStop estop = 3;
        MainChangeLane change_lane = 4;
        MainMissionComplete mission_complete = 6;
        MainNotReady not_ready = 7;
        MainParking parking = 8;
    }
    repeated TargetLane target_lane = 5;
}

message MasterVehicleDebug {
    optional apollo.common.PointENU position = 1;
    optional string current_lane_id = 2;
    optional double lane_s = 3;
    optional double lane_l = 4;
    optional double route_s = 5 [deprecated = true];
    optional double route_l = 6 [deprecated = true];
    optional double heading = 7;
    optional double heading_speed = 8;
    optional double heading_acceleration = 9;
    optional Range route_s_range = 10;
    optional Range route_l_range = 11;
}

message ObjectDebug {
    optional string id = 1;
    optional string path_id = 2;
    optional Range route_s = 3;
    optional Range route_l = 4;
    optional bool on_route = 5;
    optional string lane_id = 6;
    optional double lane_s = 7;
    optional bool on_lane = 8;
    optional double path_speed = 9;
    // x is time (t), y is s
    repeated apollo.common.Point3D st_region =  10;
}

message LatencyStats {
    optional double total_time_ms = 1;
    optional double sensor_read_time_ms = 2;
    optional double adc_prepare_time_ms = 3;
    optional double obj_prepare_time_ms = 4;
    optional double world_rule_time_ms = 5;
    optional double st_graph_time_ms = 6;
    // time diff between gateway_msg_receive_timestamp and gateway_msg_timestamp
    optional double gateway_receive_delay_ms = 8;
    // time diff between perception_msg_receive_timestamp and perception_msg_timestamp
    optional double perception_receive_delay_ms = 9;
    // time diff between prediction_msg_receive_timestamp and prediction_msg_timestamp
    optional double prediction_receive_delay_ms = 10;
    // time diff between signal_msg_receive_timestamp and signal_msg_timestamp
    optional double signal_receive_delay_ms = 11;
    // time interval in ms between perception last and its previous msg
    optional double perception_interval_ms = 12;
    // time interval in ms between prediction last and its previous msg
    optional double prediction_interval_ms = 13;
}

message Stats {
    optional LatencyStats latency_stats = 1;
}

message ModuleDebug {
  optional uint32 gateway_sequence_num = 1;
  optional uint32 perception_sequence_num = 2;
  optional uint32 prediction_sequence_num = 3;
  optional uint32 signal_sequence_num = 4;
}

// next id: 8
message Debug {
    optional MasterVehicleDebug master_vehicle = 1;
    // stores current frame's original decision when current decision has be modified.
    // E.g., when current decision is the first encountered estop, we may use
    // a valid history decision to replace current decision, but the estop decision
    // will be stored in original_decision
    optional MainDecision original_decision = 2;
    repeated ObjectDebug object = 3;
    // some meta data will be dumped into debug per sample frequency:
    // e.g. every 500 decision, meta data will be dumped once.
    optional bytes map_version = 5;
    optional bytes decision_version = 7;

    // record per module debug info
    optional ModuleDebug module_debug = 6;
}

// The light signal of the adc
// naming reference https://en.wikipedia.org/wiki/Automotive_lighting
message LightSignal {
    optional bool emergency = 1; // hazard signal
    enum TurnSignal {
        NO_TURN = 1;
        LEFT_TURN = 2;
        RIGHT_TURN = 3;
    };
    optional TurnSignal turn_signal = 2 [default = NO_TURN];
}

message DecisionResult {
    optional apollo.common.Header header = 1;
    optional ObjectDecisions object_decision = 2;
    optional MainDecision main_decision = 3;
    optional Debug debug = 4;
    optional Stats stats = 6;
    optional apollo.canbus.Signal signal = 7;
    optional LightSignal light_signal = 5 [deprecated = true];
}
